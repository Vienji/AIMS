/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aims.inventory.orders;

import aims.classes.EntryAccount;
import aims.classes.OrderItem;
import aims.classes.Temp;
import aims.databasemanager.AccountingDBController;
import aims.databasemanager.InventoryDBController;
import aims.databasemanager.UserDBController;
import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Vienji
 */
public class ViewOrder extends javax.swing.JFrame {
    LocalDate date = LocalDate.now();
    Date sqlDate = Date.valueOf(date);
    /**
     * Creates new form ViewOrder
     */
    public ViewOrder() {
        initComponents();
        temp.setValue("");
        ImageIcon icon = new ImageIcon("src\\aims\\images\\aims-logo.png");
        setIconImage(icon.getImage());
    }

    public Temp temp = new Temp();
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        oID = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        supplier = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateOrdered = new javax.swing.JLabel();
        numOfItems = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        orderTotal = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        orderedBy = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        modeOfPayment = new javax.swing.JLabel();
        dateModified = new javax.swing.JLabel();
        dateReceived = new javax.swing.JLabel();
        modifiedBy = new javax.swing.JLabel();
        receiver = new javax.swing.JLabel();
        receivedButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        cancelOrderButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Order ID:");

        oID.setText("000");

        jLabel3.setText("Supplier:");

        supplier.setText("Supplier Name");

        jLabel5.setText("Date Ordered:");

        jLabel6.setText("No. of Items:");

        dateOrdered.setText("0000-00-00");

        numOfItems.setText("0");

        jLabel9.setText("Items");

        itemsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Quantity", "Amount"
            }
        ));
        itemsList.setEnabled(false);
        jScrollPane1.setViewportView(itemsList);

        jLabel10.setText("Order Total: â‚±");

        orderTotal.setText("0.00");

        jLabel12.setText("Status:");

        status.setText("Pending");

        jLabel14.setText("Ordered by:");

        orderedBy.setText("username");

        jLabel16.setText("Mode of Payment:");

        modeOfPayment.setText("Cash");

        dateModified.setText("Date Received:");

        dateReceived.setText("To Receive");

        modifiedBy.setText("Received by:");

        receiver.setText("Username");

        receivedButton.setText("Received");
        receivedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receivedButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        cancelOrderButton.setText("Cancel Order");
        cancelOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oID))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(supplier)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateOrdered))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderedBy)))
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderTotal))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(status))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modeOfPayment))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numOfItems)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(modifiedBy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(receiver))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateModified)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateReceived)))
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(receivedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelOrderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(oID)
                    .addComponent(jLabel5)
                    .addComponent(dateOrdered))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(supplier)
                    .addComponent(jLabel14)
                    .addComponent(orderedBy))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(numOfItems)
                    .addComponent(dateModified)
                    .addComponent(dateReceived))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(orderTotal)
                    .addComponent(modifiedBy)
                    .addComponent(receiver))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(status))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(modeOfPayment))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(receivedButton)
                    .addComponent(backButton)
                    .addComponent(cancelOrderButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void cancelOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderButtonActionPerformed
        
        int n = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to cancel this order?");
        
        if(n == 0){           
            new InventoryDBController().changeStatus(oID.getText(), "Cancelled",  new UserDBController().getUserID(temp.getValue()), date.toString());
            JOptionPane.showMessageDialog(rootPane, "Order was Cancelled!"); 
            status.setText("Cancelled");             
            dateModified.setText("Date Cancelled: ");
            modifiedBy.setText("Cancelled by: ");
            receiver.setText(temp.getValue());
            dateReceived.setText(date.toString());
            cancelOrderButton.setEnabled(false);
            receivedButton.setEnabled(false);
        }       
    }//GEN-LAST:event_cancelOrderButtonActionPerformed

    private void receivedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receivedButtonActionPerformed
        
        int n = JOptionPane.showConfirmDialog(rootPane, "Are you sure that you've already receive all of your items?");
        
        if(n == 0){
            new InventoryDBController().changeStatus(oID.getText(), "Received",  new UserDBController().getUserID(temp.getValue()), date.toString());
            JOptionPane.showMessageDialog(rootPane, "Order Received!"); 
            status.setText("Received");             
            dateModified.setText("Date Received: ");
            modifiedBy.setText("Received by: ");
            receiver.setText(temp.getValue());
            dateReceived.setText(date.toString());
            cancelOrderButton.setEnabled(false);
            receivedButton.setEnabled(false);
            
            
            //Adding Transaction into Journal
            ArrayList<EntryAccount> entry = new ArrayList<>();
            
            EntryAccount e1 = new EntryAccount(), e2 = new EntryAccount();
            String floatTotal = "";
            
            for(int i = 0; i < orderTotal.getText().length(); i++){
            if( orderTotal.getText().charAt(i) != ',') {
                floatTotal += orderTotal.getText().charAt(i);              
            }
        }
            
            ArrayList<OrderItem> itemsList = new InventoryDBController().getOrderItems(oID.getText());
            
            if(modeOfPayment.getText().equals("Cash")){
                e1.setAccountName("Cash");
                e1.setAction("Credit");
                e1.setAmount(floatTotal);
                e2.setAccountName("Inventory");
                e2.setAction("Debit");
                e2.setAmount(floatTotal);
                entry.add(e1);
                entry.add(e2);
                
                new AccountingDBController().addJournalEntry(sqlDate,
                        writeDescription(itemsList), temp.getValue(), entry, String.valueOf(new AccountingDBController().getSetCurrentJournal()));
                
                JOptionPane.showMessageDialog(rootPane, "Orders were received and the transaction was added into the accounting journal.");             
                
            } else {
                e1.setAccountName("Accounts Payable");
                e1.setAction("Credit");
                e1.setAmount(floatTotal);
                e2.setAccountName("Inventory");
                e2.setAction("Debit");
                e2.setAmount(floatTotal);
                entry.add(e1);
                entry.add(e2);
                
                new AccountingDBController().addJournalEntry(sqlDate,
                        writeDescription(itemsList), temp.getValue(), entry, String.valueOf(new AccountingDBController().getSetCurrentJournal()));
                
                JOptionPane.showMessageDialog(rootPane, "Orders were received and the transaction was added into the accounting journal.");
            }          
        }
    }//GEN-LAST:event_receivedButtonActionPerformed

    private String writeDescription(ArrayList<OrderItem> array){
        String s = "Bought ";
        int n = 1;
        
        for(OrderItem item : array){
            
            if(array.size() == 1){ return s + item.getItemName() + " from " + supplier.getText();}
            
            if(n < array.size()){
                s += item.getItemName() + ", ";
            } else {
                s += "and " + item.getItemName();
            }
            n++;
        }
             
        return s += " from " + supplier.getText();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    public javax.swing.JButton cancelOrderButton;
    public javax.swing.JLabel dateModified;
    public javax.swing.JLabel dateOrdered;
    public javax.swing.JLabel dateReceived;
    public javax.swing.JTable itemsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel modeOfPayment;
    public javax.swing.JLabel modifiedBy;
    public javax.swing.JLabel numOfItems;
    public javax.swing.JLabel oID;
    public javax.swing.JLabel orderTotal;
    public javax.swing.JLabel orderedBy;
    public javax.swing.JButton receivedButton;
    public javax.swing.JLabel receiver;
    public javax.swing.JLabel status;
    public javax.swing.JLabel supplier;
    // End of variables declaration//GEN-END:variables
}
